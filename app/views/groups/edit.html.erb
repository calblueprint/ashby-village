<div class="edit-group row">
<h2>Edit Group</h2>
  <div class="small-12 small-centered medium-10 large-10 column">
    <div class="edit-group-form row">
      <%= form_for @group do |f| %>
        <div class="field">
          <%= f.label 'Group Name' %>
          <%= f.text_field :name, autofocus: true, value: @group.name %>
        </div>

        <div class="field">
          <%= f.label 'Group Description' %>
          <%= f.text_area :description, autofocus: true, value: @group.description %>
        </div>

        <div class="field">
          <%= f.label 'Upload a new group photo' %>
          <p><i> Please upload a large image! Preferably at least 960 pixels wide. </i></p>
          <%= f.file_field :photo, class: "uploadFile" %>
          <%= image_tag((@group.photo), class: "groupPhotoPreview") %>
        </div></br>

        <div class="field" id="selected-group-leaders">
          <%= f.label 'Group Leaders' %>
          <p><i>Start typing the names of your fellow group leaders to select</i></p>
          <%= autocomplete_field_tag :group_leaders, '', autocomplete_user_full_name_groups_path %>
          <%= hidden_field_tag 'selected_leaders' %>
        </div>
 
        <div class="field">
          <%= f.label 'Kind of Group' %>
          <%= f.select(:kind, @kinds, autofocus: true, value: @group.kind) %>
        </div>

        <div class="field">
        <%= f.label 'Neighborhood of Group' %>
        <%= f.select(:neighborhood, @neighborhoods, autofocus:true, value: @group.neighborhood) %>
        </div>

        <div class="actions">
          <%= f.submit "Update", class: 'button success radius small' %>
        </div>

      <% end %>
    </div>
  </div>
</div>
<script>
var group_leader_ids = [<%= raw ('"' + @group.users.leaders.map(&:id).join('","') + '"') %>];
// Function to remove selected leader
function remove_selected_leader(button) {
  var id = button.parentElement.id;
  button.parentElement.remove();
  index = group_leader_ids.indexOf(id);
  if(index > -1) {
    group_leader_ids.splice(index, 1);
  }
  $("#selected_leaders")[0].value = group_leader_ids;
};
// Function to add a selected leader
function add_selected_leader(name, id) {
  var div = document.createElement('div');
  div.innerHTML = name + '<button type="button" onclick="remove_selected_leader(this)"> x </button>';
  div.id = id;
  return div;
}
// Function called when autocomplete has been selected
$("#group_leaders").bind('railsAutocomplete.select', function(event, data){
  // Add id's to array to pass to rails (hidden_field_tag?)
  group_leader_ids.push(data.item.id);
  // Set hidden field
  $("#selected_leaders")[0].value = group_leader_ids;
  // Blank autocomplete field
  $("#group_leaders")[0].value = "";
  // Add Selected Name to new visible field
  $("#selected-group-leaders")[0].appendChild(add_selected_leader(data.item.value, data.item.id));
});
var initial_group_leader_names = <%= raw @group.users.leaders.map(&:full_name) %>;
for (i = 0; i < group_leader_ids.length; i++) { 
  $("#selected-group-leaders")[0].appendChild(add_selected_leader(initial_group_leader_names[i], group_leader_ids[i]));
}
</script>
